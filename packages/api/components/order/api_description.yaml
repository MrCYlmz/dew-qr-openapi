components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# change the name
userPlaceOrder:
  post:
    tags:
      - User
    name: placeOrder
    operationId: placeOrder
    summary: Place an order
    description: Place a new order for food or drink items.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "./model.yaml#/order"
    responses:
      "201":
        description: Order placed successfully.
        content:
          application/json:
            schema:
              $ref: "./model.yaml#/order"
      "400":
        description: Bad request. Invalid input data.
      "500":
        description: Internal server error.
userFetchOrders:
  get:
    tags:
      - User
    name: fetchUserOrders
    operationId: fetchUserOrders
    summary: Get a list of user orders
    description: Retrieve a list of all orders placed by the user, optionally filtered by status.
    parameters:
      - name: status
        in: query
        description: Filter orders by status (e.g., PENDING, COMPLETED, CANCELLED).
        required: false
        schema:
          type: string
          enum: ["PENDING", "COMPLETED", "CANCELLED"]
      - name: userId
        in: path
        description: The unique identifier of the order to cancel.
        required: true
        schema:
          type: string
          format: uuid
          example: '550e8400-e29b-41d4-a716-446655440000'
          description: The unique identifier for the order.
    responses:
      "200":
        description: A list of user orders.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "./model.yaml#/order"
      "400":
        description: Bad request. Invalid parameters.
      "500":
        description: Internal server error.
  # This future is not applicable in real life.
  # put:
  #   tags:
  #     - User
  #   name: cancelOrder
  #   operationId: cancelOrder
  #   summary: Cancel an order
  #   description: Cancel an existing order.
  #   parameters:
  #     - name: userId
  #       in: path
  #       description: The unique identifier of the user who placed the order.
  #       required: true
  #       schema:
  #         type: string
  #         example: '550e8400-e29b-41d4-a716-446655440000'
  #         description: The unique identifier for the order.
  #   security: 
  #     - BearerAuth: []
  #   requestBody:
  #     required: true
  #     content:
  #       application/json:
  #         schema:
  #           type: string
  #           example: '550e8400-e29b-41d4-a716-446655440000'
  #           description: The unique identifier for the order to cancel.
  #   responses:
  #     "200":
  #       description: Order canceled successfully.
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "./model.yaml#/order"
  #     "400":
  #       description: Bad request. Invalid parameters.
  #     "404":
  #       description: Order not found.
  #     "500":
  #       description: Internal server error.
fetchAllOrders:
  get:
    tags:
      - Admin
    name: fetchOrders
    operationId: fetchOrders
    summary: Get a list of orders
    description: Retrieve a list of all orders placed by users.
    parameters:
      - name: status
        in: query
        description: Filter orders by status (e.g., PENDING, COMPLETED, CANCELLED).
        required: false
        schema:
          type: string
          enum: ["PENDING", "COMPLETED", "CANCELLED"]
      - name: tableNumber
        in: query
        description: Filter orders by table number.
        required: false
        schema:
          type: integer
    responses:
      "200":
        description: A list of orders.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "./model.yaml#/order"
      "400":
        description: Bad request. Invalid parameters.
      "500":
        description: Internal server error.
adminOrderFunctions:
  put:
    tags:
      - Admin
    name: changeOrderStatus
    operationId: changeOrderStatus
    summary: Change order status
    description: Update the status of an order.
    parameters:
      - name: orderId
        in: path
        description: The unique identifier of the order to update.
        required: true
        schema:
          type: string
          format: uuid
          example: '550e8400-e29b-41d4-a716-446655440000'
      - name: status
        in: path
        description: The new status of the order (e.g., PENDING, COMPLETED, CANCELLED).
        required: true
        schema:
          type: string
          enum: ["PENDING", "COMPLETED", "CANCELLED"]
          example: "COMPLETED"    
    security:
      - BearerAuth: []
    responses:
      "200":
        description: Order closed successfully.
        content:
          application/json:
            schema:
              $ref: "./model.yaml#/order"
      "400":
        description: Bad request. Invalid parameters.
      "404":
        description: Order not found.
      "500":
        description: Internal server error.
  delete:
    tags:
      - Admin
    name: deleteOrder
    operationId: deleteOrder
    summary: Delete an order
    description: Remove an order from the system.
    parameters:
      - name: id
        in: path
        description: The unique identifier of the order to update.
        required: true
        schema:
          type: string
          format: uuid
          example: '550e8400-e29b-41d4-a716-446655440000'
    security:
      - BearerAuth: []
    responses:
      "204":
        description: Order deleted successfully.
      "400":
        description: Bad request. Invalid parameters.
      "404":
        description: Order not found.
      "500":
        description: Internal server error.

